{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/persons.js","App.js","index.js"],"names":["Filter","props","onChange","value","PersonForm","onSubmit","nameChange","nameValue","numberChange","numberValue","type","Person","name","number","onClick","goDelete","Persons","list","map","x","id","baseUrl","personService","getAll","axios","get","create","newObject","post","update","put","delete","Notification","msg","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","message","setMessage","displayList","length","slice","toUpperCase","useEffect","then","data","event","target","found","find","preventDefault","window","confirm","changedNumber","response","catch","y","setTimeout","concat","nameDelete","z","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e456a992.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => (\r\n    <div>\r\n        <span>\r\n            Find an existing contact:{' '}\r\n            <input onChange={props.onChange} value={props.value} />\r\n        </span>\r\n    </div>\r\n)\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => (\r\n    <form onSubmit={props.onSubmit}>\r\n        <div>Name: \r\n            <input \r\n            onChange={props.nameChange} \r\n            value={props.nameValue} \r\n            />\r\n        </div>\r\n        <div>Phone: \r\n            <input \r\n            onChange={props.numberChange} \r\n            value={props.numberValue} \r\n            />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">Add</button>\r\n        </div>\r\n    </form>\r\n)\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = (props) => (\r\n    <div>\r\n        <span>{props.name} {props.number}</span>{' '}\r\n        <button onClick={props.goDelete}>Delete</button>\r\n    </div>\r\n)\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = (props) => (\r\n    // Map the list passed here as a prop to display a Person component \r\n    // with a unique key for each object in the array\r\n    props.list.map((x) => \r\n    <Person \r\n        key={x.name} \r\n        name={x.name} \r\n        number={x.number}\r\n        goDelete={() => props.goDelete(x.id)}\r\n    />)\r\n    // anon func saves mapped specific person id, passes as prop to that Person\r\n)\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => axios.get(baseUrl)\r\n\r\nconst create = newObject => axios.post(baseUrl, newObject)\r\n\r\nconst goDelete = (id) => axios.delete(`${baseUrl}/${id}`)\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject)\r\n\r\n// Assign object to a variable before exporting as module default  \r\n// import/no-anonymous-default-export\r\nconst personService = { getAll, create, update, goDelete }\r\n\r\nexport default personService","import React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport Persons from './components/Persons'\r\nimport personService from './services/persons'\r\nimport './App.css'\r\n\r\nconst Notification = (props) => {\r\n  if (props.msg === '') {\r\n    return (\r\n      // reserved space for notification\r\n      <div className=\"empty\"></div>\r\n    )\r\n  }\r\n\r\n  return  (\r\n    <div className=\"empty\">\r\n      {props.type === \"success\"\r\n        ? <div className=\"notification success\">{props.msg}</div>\r\n        : <div className=\"notification error\">{props.msg}</div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ message, setMessage ] = useState({ msg: '', type: '' })\r\n\r\n  // controlled components\r\n  const nameChange = (event) => setNewName(event.target.value)\r\n  const numberChange = (event) => setNewNumber(event.target.value)\r\n  const filterChange = (event) => setFilter(event.target.value)\r\n\r\n  // On every render re-evaluating list of numbers\r\n  let displayList = []\r\n\r\n  // Initially used a setSearch state that was called in a useEffect dependent\r\n  // on persons and filter. That worked but added alot more complexity at the\r\n  // tradeoff of now having to re-evaluate every render.\r\n  if (persons.length !== 0 && filter.length !== 0) {\r\n    displayList = persons.filter(\r\n      (x) => (x.name.slice(0, filter.length).toUpperCase() === filter.toUpperCase())\r\n    )\r\n  } else if (filter.length === 0) {\r\n    displayList = persons\r\n  }\r\n\r\n  useEffect(() => {\r\n    // personService object containing axios methods imported from ./services/persons\r\n    personService\r\n      .getAll()\r\n      .then(x => {\r\n        setPersons(x.data)\r\n      })\r\n  }, [])\r\n\r\n  const addToPhonebook = (event) => {\r\n    \r\n    let found = persons.find((x) => x.name.toUpperCase() === newName.toUpperCase());\r\n\r\n    event.preventDefault()\r\n\r\n    // The input name submitted exists in the phonebook\r\n    if (found) {\r\n      if (window.confirm(`${newName}` +\r\n      \" is already added to the phonebook,\" +\r\n      \" replace the old number with a new one?\")) {\r\n        let changedNumber = { ...found, number: newNumber }\r\n        personService\r\n        .update(found.id, changedNumber)\r\n        // need to find and replace person in persons with new number\r\n        .then(response => setPersons(persons.map(x => found.id !== x.id ? x : response.data)))\r\n        .catch(() => {\r\n          // update fails, 404 not found\r\n          // remove the person from the current render of phonebook\r\n          setPersons(persons.filter(y => found.id !== y.id))\r\n          // display error message\r\n          setMessage({\r\n            msg: `${found.name}'s records were already deleted from the server`,\r\n            type: \"error\"\r\n          })\r\n          // clear the message after 5 seconds\r\n          setTimeout(() => \r\n            setMessage({ msg: '', type: '' }), 3000)\r\n        })\r\n      }\r\n    }\r\n    // The input name is unique to the phonebook\r\n    else {\r\n      // create new object with the states of the input fields for name and number\r\n      const newObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n      \r\n      personService\r\n      .create(newObject)\r\n      .then(response => {\r\n          // concatenate that new object to the end of the persons array,\r\n          // need to use concat with state here to not manipulate the previous state\r\n          setPersons(persons.concat(response.data))\r\n          // Clear the states which clears the input fields\r\n          setNewName('')\r\n          setNewNumber('')\r\n          // Success message\r\n          setMessage({\r\n            msg: `Added ${response.data.name} to the Phonebook`,\r\n            type: \"success\"\r\n          })\r\n          // Clear the message after 5 seconds\r\n          setTimeout(() => \r\n            setMessage({ msg: '', type: '' }), 3000)\r\n      })\r\n    }\r\n  }\r\n\r\n  // func expression takes id param, send delete request with id to server\r\n  // then sync setPersons state to filter out the deleted id\r\n  const DeleteFromPhonebook = (x) => {\r\n    // get name using id\r\n    const nameDelete = (persons.find((z) => z.id === x)).name\r\n    // confirm message\r\n    if (window.confirm(`Delete ${nameDelete}?`)) {\r\n      personService\r\n      .goDelete(x)\r\n      .then(() => setPersons(persons.filter(y => x !== y.id)))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Notification type={message.type} msg={message.msg} />\r\n\r\n      <h2>Phonebook</h2>\r\n\r\n      <Filter onChange={filterChange} value={filter} />\r\n      \r\n      <h2>Add new contact</h2>\r\n\r\n      <PersonForm \r\n        onSubmit={addToPhonebook}\r\n        nameChange={nameChange}\r\n        numberChange={numberChange}\r\n        nameValue={newName}\r\n        numberValue={newNumber}\r\n      />\r\n\r\n      <h2>Numbers</h2>\r\n\r\n      <Persons list={displayList} goDelete={DeleteFromPhonebook} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}